{"version":3,"sources":["Components/Diabetes.js","Components/Cholesterol.js","Components/Hypertension.js","Components/Weight-Loss.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Diabetes","react_default","a","createElement","className","Component","Cholesterol","Hypertension","WeightLoss","cardComponents","card","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateSearch","e","toConsumableArray","state","text","target","value","filterCard","filter","tag","toLocaleLowerCase","includes","setState","filterCardComponent","search","showComponent","map","i","key","react_router_dom","to","concat","width","src","alt","type","placeholder","onChange","App","_this2","Components_NavBar","react_router","path","component","Components_Diabetes","assign","Components_Cholesterol","Components_Hypertension","Weight_Loss","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e06ddc77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Diabetes extends Component {\n\n  render() {\n    return (\n      <div className=\"box\">\n      <h6>Diabetes</h6>\n        <p>\n            Diabetes is a disease in which your blood glucose, or blood sugar, levels are too high. Glucose comes from the foods you eat. Insulin is a hormone that helps the glucose get into your cells to give them energy. With type 1 diabetes, your body does not make insulin. With type 2 diabetes, the more common type, your body does not make or use insulin well. Without enough insulin, the glucose stays in your blood. You can also have prediabetes. This means that your blood sugar is higher than normal but not high enough to be called diabetes. Having prediabetes puts you at a higher risk of getting type 2 diabetes.\n\n            Over time, having too much glucose in your blood can cause serious problems. It can damage your eyes, kidneys, and nerves. Diabetes can also cause heart disease, stroke and even the need to remove a limb. Pregnant women can also get diabetes, called gestational diabetes.\n\n            Blood tests can show if you have diabetes. One type of test, the A1C, can also check on how you are managing your diabetes. Exercise, weight control and sticking to your meal plan can help control your diabetes. You should also monitor your blood glucose level and take medicine if prescribed.\n\n            NIH: National Institute of Diabetes and Digestive and Kidney Diseases\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Diabetes;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Cholesterol extends Component {\n\n  render() {\n    return (\n      <div className=\"box\">\n      <h6>Cholesterol</h6>\n        <p>Cholesterol is a waxy substance found in your blood. Your body needs cholesterol to build healthy cells, but high levels of cholesterol can increase your risk of heart disease.\n\n            With high cholesterol, you can develop fatty deposits in your blood vessels. Eventually, these deposits grow, making it difficult for enough blood to flow through your arteries. Sometimes, those deposits can break suddenly and form a clot that causes a heart attack or stroke.\n\n            High cholesterol can be inherited, but it's often the result of unhealthy lifestyle choices, which make it preventable and treatable. A healthy diet, regular exercise and sometimes medication can help reduce high cholesterol.</p>\n      </div>\n    );\n  }\n}\n\nexport default Cholesterol;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Hypertension extends Component {\n  render() {\n    return (\n      <div className=\"box\">\n      <h6>Hypertension</h6>\n        <p>High blood pressure is a common condition in which the long-term force of the blood against your artery walls is high enough that it may eventually cause health problems, such as heart disease.\n\n            Blood pressure is determined both by the amount of blood your heart pumps and the amount of resistance to blood flow in your arteries. The more blood your heart pumps and the narrower your arteries, the higher your blood pressure.\n\n            You can have high blood pressure (hypertension) for years without any symptoms. Even without symptoms, damage to blood vessels and your heart continues and can be detected. Uncontrolled high blood pressure increases your risk of serious health problems, including heart attack and stroke.\n\n            High blood pressure generally develops over many years, and it affects nearly everyone eventually. Fortunately, high blood pressure can be easily detected. And once you know you have high blood pressure, you can work with your doctor to control it.</p>\n      </div>\n    );\n  }\n}\n\nexport default Hypertension;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass WeightLoss extends Component {\n  render() {\n    return (\n      <div className=\"box\">\n       <h6>Weight-Loss</h6>\n        <p>\n        There are many ways to lose a lot of weight fast.\n\n        However, most of them will make you hungry and unsatisfied.\n\n        If you don't have iron willpower, then hunger will cause you to give up on these plans quickly.\n\n        The plan outlined here will:\n\n        Reduce your appetite significantly.\n        Make you lose weight quickly, without hunger.\n        Improve your metabolic health at the same time.\n        Here is a simple 3-step plan to lose weight fast.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default WeightLoss;","import React, { Component } from 'react';\nimport '../App.css';\nimport {Link} from 'react-router-dom';\n\n\nlet cardComponents = [{\n  \n  card: 'Diabetes'\n},{\n\n  card: 'Cholesterol'\n},{\n \n  card: 'Hypertension'\n},{\n  \n  card: 'Weight-Loss'\n},\n]\n\n\nclass NavBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardComponents:cardComponents,\n      filterCardComponent:[]\n    }\n  }\n\n\n  updateSearch = (e) =>{\n  \n    let cardComponents =[...this.state.cardComponents]\n    let text = e.target.value\n    let filterCard= cardComponents.filter((tag) =>{\n     \n    return tag.card.toLocaleLowerCase().includes(text)\n  \n    })\n    if (text == ''){\n      filterCard = []\n    }\n    this.setState({\n      filterCardComponent:filterCard,\n      search:text\n    })\n  }\n\n\n\nshowComponent = () => {\n\n  const listComponents = this.state.filterCardComponent.map((card,i) => {\n       \n    return (\n    <div key ={i}>\n        <p><Link to={`${card.card}`}>{card.card}</Link></p>\n    </div>\n    )  \n })\n return listComponents\n}\n\n\n\n\n  render() {\n    return (\n      <div className=\"NavBar\">\n     \n     <img width=\"20px\" src=\"./search.png\" alt=\"\"/><input type=\"text\" value = {this.state.search} placeholder=\"Search...\" \n          onChange={this.updateSearch}\n          />\n \n     {this.showComponent()}\n    \n   \n      </div>\n    );\n  }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Diabetes from './Components/Diabetes'\nimport Cholesterol from './Components/Cholesterol'\nimport Hypertension from './Components/Hypertension'\nimport WeightLoss from './Components/Weight-Loss'\nimport NavBar from './Components/NavBar'\n\n\n\nclass App extends Component {\n\n\nsearch = () => {\n\n}\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n          <NavBar/>\n\n          <Switch>\n            <Route \n               path=\"/Diabetes\" \n               component={(props) => <Diabetes {...props} {...this.state}/>} />\n            \n            <Route \n               path=\"/Cholesterol\" \n               component={(props) => <Cholesterol {...props} {...this.state}/>} />\n\n            <Route \n               path=\"/Hypertension\" \n               component={(props) => <Hypertension {...props} {...this.state}/>} />\n\n            <Route \n               path=\"/Weight-Loss\" \n               component={(props) => <WeightLoss {...props} {...this.state}/>} />\n\n          </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n<App />\n</BrowserRouter>,\n document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}